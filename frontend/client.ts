// Code generated by the Encore 1.50.6 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly admin: admin.ServiceClient
    public readonly atexya: atexya.ServiceClient
    public readonly stripe: stripe.ServiceClient
    public readonly user: user.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.admin = new admin.ServiceClient(base)
        this.atexya = new atexya.ServiceClient(base)
        this.stripe = new stripe.ServiceClient(base)
        this.user = new user.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    login as api_admin_auth_login,
    logout as api_admin_auth_logout
} from "~backend/admin/auth";
import {
    getBrokers as api_admin_brokers_getBrokers,
    updateBrokers as api_admin_brokers_updateBrokers
} from "~backend/admin/brokers";
import {
    getCgv as api_admin_cgv_getCgv,
    updateCgv as api_admin_cgv_updateCgv,
    uploadCgvPdf as api_admin_cgv_uploadCgvPdf
} from "~backend/admin/cgv";
import {
    getDeletionAudit as api_admin_deletion_requests_getDeletionAudit,
    getDeletionStats as api_admin_deletion_requests_getDeletionStats,
    listDeletionRequests as api_admin_deletion_requests_listDeletionRequests
} from "~backend/admin/deletion-requests";
import {
    getLinks as api_admin_links_getLinks,
    updateLinks as api_admin_links_updateLinks
} from "~backend/admin/links";
import {
    getPricing as api_admin_pricing_getPricing,
    updatePricing as api_admin_pricing_updatePricing
} from "~backend/admin/pricing";
import {
    getPromo as api_admin_promo_getPromo,
    updatePromo as api_admin_promo_updatePromo
} from "~backend/admin/promo";

export namespace admin {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getBrokers = this.getBrokers.bind(this)
            this.getCgv = this.getCgv.bind(this)
            this.getDeletionAudit = this.getDeletionAudit.bind(this)
            this.getDeletionStats = this.getDeletionStats.bind(this)
            this.getLinks = this.getLinks.bind(this)
            this.getPricing = this.getPricing.bind(this)
            this.getPromo = this.getPromo.bind(this)
            this.listDeletionRequests = this.listDeletionRequests.bind(this)
            this.login = this.login.bind(this)
            this.logout = this.logout.bind(this)
            this.updateBrokers = this.updateBrokers.bind(this)
            this.updateCgv = this.updateCgv.bind(this)
            this.updateLinks = this.updateLinks.bind(this)
            this.updatePricing = this.updatePricing.bind(this)
            this.updatePromo = this.updatePromo.bind(this)
            this.uploadCgvPdf = this.uploadCgvPdf.bind(this)
        }

        /**
         * Gets the brokers config.
         */
        public async getBrokers(): Promise<ResponseType<typeof api_admin_brokers_getBrokers>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/config/brokers`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_brokers_getBrokers>
        }

        /**
         * Gets the CGV config.
         */
        public async getCgv(): Promise<ResponseType<typeof api_admin_cgv_getCgv>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/config/cgv`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_cgv_getCgv>
        }

        public async getDeletionAudit(params: { request_id: string }): Promise<ResponseType<typeof api_admin_deletion_requests_getDeletionAudit>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/deletion-requests/${encodeURIComponent(params.request_id)}/audit`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_deletion_requests_getDeletionAudit>
        }

        public async getDeletionStats(): Promise<ResponseType<typeof api_admin_deletion_requests_getDeletionStats>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/deletion-requests/stats`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_deletion_requests_getDeletionStats>
        }

        /**
         * Gets the links config.
         */
        public async getLinks(): Promise<ResponseType<typeof api_admin_links_getLinks>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/config/links`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_links_getLinks>
        }

        /**
         * Gets the pricing config.
         */
        public async getPricing(): Promise<ResponseType<typeof api_admin_pricing_getPricing>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/config/pricing`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_pricing_getPricing>
        }

        /**
         * Gets the promotion config.
         */
        public async getPromo(): Promise<ResponseType<typeof api_admin_promo_getPromo>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/config/promo`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_promo_getPromo>
        }

        public async listDeletionRequests(params: RequestType<typeof api_admin_deletion_requests_listDeletionRequests>): Promise<ResponseType<typeof api_admin_deletion_requests_listDeletionRequests>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                email:  params.email,
                limit:  params.limit === undefined ? undefined : String(params.limit),
                offset: params.offset === undefined ? undefined : String(params.offset),
                status: params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/deletion-requests`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_deletion_requests_listDeletionRequests>
        }

        /**
         * Logs in an admin user.
         */
        public async login(params: RequestType<typeof api_admin_auth_login>): Promise<ResponseType<typeof api_admin_auth_login>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/login`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_auth_login>
        }

        /**
         * Logs out an admin user.
         */
        public async logout(): Promise<ResponseType<typeof api_admin_auth_logout>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/logout`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_auth_logout>
        }

        /**
         * Updates the brokers config.
         */
        public async updateBrokers(params: RequestType<typeof api_admin_brokers_updateBrokers>): Promise<ResponseType<typeof api_admin_brokers_updateBrokers>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/config/brokers`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_brokers_updateBrokers>
        }

        /**
         * Updates the CGV config.
         */
        public async updateCgv(params: RequestType<typeof api_admin_cgv_updateCgv>): Promise<ResponseType<typeof api_admin_cgv_updateCgv>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/config/cgv`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_cgv_updateCgv>
        }

        /**
         * Updates the links config.
         */
        public async updateLinks(params: RequestType<typeof api_admin_links_updateLinks>): Promise<ResponseType<typeof api_admin_links_updateLinks>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/config/links`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_links_updateLinks>
        }

        /**
         * Updates the pricing config.
         */
        public async updatePricing(params: RequestType<typeof api_admin_pricing_updatePricing>): Promise<ResponseType<typeof api_admin_pricing_updatePricing>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/config/pricing`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_pricing_updatePricing>
        }

        /**
         * Updates the promotion config.
         */
        public async updatePromo(params: RequestType<typeof api_admin_promo_updatePromo>): Promise<ResponseType<typeof api_admin_promo_updatePromo>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/config/promo`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_promo_updatePromo>
        }

        /**
         * Uploads the CGV PDF (with security validation).
         */
        public async uploadCgvPdf(params: RequestType<typeof api_admin_cgv_uploadCgvPdf>): Promise<ResponseType<typeof api_admin_cgv_uploadCgvPdf>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/config/cgv/upload`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_cgv_uploadCgvPdf>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { validateBroker as api_atexya_brokers_validateBroker } from "~backend/atexya/brokers";
import { sendContact as api_atexya_contact_sendContact } from "~backend/atexya/contact";
import {
    createContract as api_atexya_contracts_createContract,
    getBrokerCommissionSummary as api_atexya_contracts_getBrokerCommissionSummary,
    getContract as api_atexya_contracts_getContract,
    listContracts as api_atexya_contracts_listContracts,
    updateContractStatus as api_atexya_contracts_updateContractStatus
} from "~backend/atexya/contracts";
import {
    notifyBrokerCommission as api_atexya_notifications_notifyBrokerCommission,
    notifyDispute as api_atexya_notifications_notifyDispute,
    notifyPaymentFailed as api_atexya_notifications_notifyPaymentFailed,
    notifyPaymentSuccess as api_atexya_notifications_notifyPaymentSuccess,
    sendEmailNotification as api_atexya_notifications_sendEmailNotification,
    sendSlackNotification as api_atexya_notifications_sendSlackNotification
} from "~backend/atexya/notifications";
import { searchCompany as api_atexya_pappers_searchCompany } from "~backend/atexya/pappers";
import { calculatePricing as api_atexya_pricing_calculatePricing } from "~backend/atexya/pricing";
import { debugPricing as api_atexya_pricing_debug_debugPricing } from "~backend/atexya/pricing-debug";

export namespace atexya {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.calculatePricing = this.calculatePricing.bind(this)
            this.createContract = this.createContract.bind(this)
            this.debugPricing = this.debugPricing.bind(this)
            this.getBrokerCommissionSummary = this.getBrokerCommissionSummary.bind(this)
            this.getContract = this.getContract.bind(this)
            this.listContracts = this.listContracts.bind(this)
            this.notifyBrokerCommission = this.notifyBrokerCommission.bind(this)
            this.notifyDispute = this.notifyDispute.bind(this)
            this.notifyPaymentFailed = this.notifyPaymentFailed.bind(this)
            this.notifyPaymentSuccess = this.notifyPaymentSuccess.bind(this)
            this.searchCompany = this.searchCompany.bind(this)
            this.sendContact = this.sendContact.bind(this)
            this.sendEmailNotification = this.sendEmailNotification.bind(this)
            this.sendSlackNotification = this.sendSlackNotification.bind(this)
            this.updateContractStatus = this.updateContractStatus.bind(this)
            this.validateBroker = this.validateBroker.bind(this)
        }

        /**
         * Calcule les tarifs d'assurance
         */
        public async calculatePricing(params: RequestType<typeof api_atexya_pricing_calculatePricing>): Promise<ResponseType<typeof api_atexya_pricing_calculatePricing>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/pricing/calculate`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_atexya_pricing_calculatePricing>
        }

        /**
         * Crée un nouveau contrat (public car nécessaire pour la souscription)
         */
        public async createContract(params: RequestType<typeof api_atexya_contracts_createContract>): Promise<ResponseType<typeof api_atexya_contracts_createContract>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/contracts/create`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_atexya_contracts_createContract>
        }

        /**
         * Endpoint de debug pour comprendre le calcul des tarifs
         */
        public async debugPricing(params: RequestType<typeof api_atexya_pricing_debug_debugPricing>): Promise<ResponseType<typeof api_atexya_pricing_debug_debugPricing>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/pricing/debug`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_atexya_pricing_debug_debugPricing>
        }

        /**
         * Récupère le résumé des commissions pour un courtier (admin uniquement)
         */
        public async getBrokerCommissionSummary(params: RequestType<typeof api_atexya_contracts_getBrokerCommissionSummary>): Promise<ResponseType<typeof api_atexya_contracts_getBrokerCommissionSummary>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/contracts/broker-commission`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_atexya_contracts_getBrokerCommissionSummary>
        }

        /**
         * Récupère un contrat (protégé - admin ou propriétaire uniquement)
         */
        public async getContract(params: RequestType<typeof api_atexya_contracts_getContract>): Promise<ResponseType<typeof api_atexya_contracts_getContract>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/contracts/get`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_atexya_contracts_getContract>
        }

        /**
         * Liste les contrats avec filtres (admin uniquement)
         */
        public async listContracts(params: RequestType<typeof api_atexya_contracts_listContracts>): Promise<ResponseType<typeof api_atexya_contracts_listContracts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/contracts/list`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_atexya_contracts_listContracts>
        }

        /**
         * Notifie une commission courtier
         */
        public async notifyBrokerCommission(params: RequestType<typeof api_atexya_notifications_notifyBrokerCommission>): Promise<ResponseType<typeof api_atexya_notifications_notifyBrokerCommission>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/notifications/broker-commission`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_atexya_notifications_notifyBrokerCommission>
        }

        /**
         * Notifie une dispute
         */
        public async notifyDispute(params: RequestType<typeof api_atexya_notifications_notifyDispute>): Promise<ResponseType<typeof api_atexya_notifications_notifyDispute>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/notifications/dispute`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_atexya_notifications_notifyDispute>
        }

        /**
         * Notifie un échec de paiement
         */
        public async notifyPaymentFailed(params: RequestType<typeof api_atexya_notifications_notifyPaymentFailed>): Promise<ResponseType<typeof api_atexya_notifications_notifyPaymentFailed>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/notifications/payment-failed`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_atexya_notifications_notifyPaymentFailed>
        }

        /**
         * Notifie un paiement réussi
         */
        public async notifyPaymentSuccess(params: RequestType<typeof api_atexya_notifications_notifyPaymentSuccess>): Promise<ResponseType<typeof api_atexya_notifications_notifyPaymentSuccess>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/notifications/payment-success`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_atexya_notifications_notifyPaymentSuccess>
        }

        /**
         * Recherche les informations d'une entreprise via son SIREN
         */
        public async searchCompany(params: RequestType<typeof api_atexya_pappers_searchCompany>): Promise<ResponseType<typeof api_atexya_pappers_searchCompany>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/pappers/company`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_atexya_pappers_searchCompany>
        }

        /**
         * Envoie une demande de contact
         */
        public async sendContact(params: RequestType<typeof api_atexya_contact_sendContact>): Promise<ResponseType<typeof api_atexya_contact_sendContact>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/contact/send`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_atexya_contact_sendContact>
        }

        /**
         * Envoie une notification email
         */
        public async sendEmailNotification(params: RequestType<typeof api_atexya_notifications_sendEmailNotification>): Promise<ResponseType<typeof api_atexya_notifications_sendEmailNotification>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/notifications/send-email`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_atexya_notifications_sendEmailNotification>
        }

        /**
         * Envoie une notification Slack
         */
        public async sendSlackNotification(params: RequestType<typeof api_atexya_notifications_sendSlackNotification>): Promise<ResponseType<typeof api_atexya_notifications_sendSlackNotification>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/notifications/send-slack`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_atexya_notifications_sendSlackNotification>
        }

        /**
         * Met à jour le statut d'un contrat (public car utilisé par webhooks Stripe)
         */
        public async updateContractStatus(params: RequestType<typeof api_atexya_contracts_updateContractStatus>): Promise<ResponseType<typeof api_atexya_contracts_updateContractStatus>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/contracts/update-status`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_atexya_contracts_updateContractStatus>
        }

        /**
         * Valide un code courtier
         */
        public async validateBroker(params: RequestType<typeof api_atexya_brokers_validateBroker>): Promise<ResponseType<typeof api_atexya_brokers_validateBroker>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/brokers/validate`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_atexya_brokers_validateBroker>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { createCheckoutSession as api_stripe_checkout_createCheckoutSession } from "~backend/stripe/checkout";
import {
    createPaymentSession as api_stripe_stripe_createPaymentSession,
    createRefund as api_stripe_stripe_createRefund,
    getSession as api_stripe_stripe_getSession
} from "~backend/stripe/stripe";
import { testStripeKey as api_stripe_test_testStripeKey } from "~backend/stripe/test";
import { handleWebhook as api_stripe_webhooks_handleWebhook } from "~backend/stripe/webhooks";

export namespace stripe {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createCheckoutSession = this.createCheckoutSession.bind(this)
            this.createPaymentSession = this.createPaymentSession.bind(this)
            this.createRefund = this.createRefund.bind(this)
            this.getSession = this.getSession.bind(this)
            this.handleWebhook = this.handleWebhook.bind(this)
            this.testStripeKey = this.testStripeKey.bind(this)
        }

        public async createCheckoutSession(params: RequestType<typeof api_stripe_checkout_createCheckoutSession>): Promise<ResponseType<typeof api_stripe_checkout_createCheckoutSession>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/api/checkout/create-session`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_stripe_checkout_createCheckoutSession>
        }

        /**
         * Crée une session de paiement Stripe
         */
        public async createPaymentSession(params: RequestType<typeof api_stripe_stripe_createPaymentSession>): Promise<ResponseType<typeof api_stripe_stripe_createPaymentSession>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/stripe/create-payment-session`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_stripe_stripe_createPaymentSession>
        }

        /**
         * Crée un remboursement (admin uniquement)
         */
        public async createRefund(params: RequestType<typeof api_stripe_stripe_createRefund>): Promise<ResponseType<typeof api_stripe_stripe_createRefund>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/stripe/refund`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_stripe_stripe_createRefund>
        }

        /**
         * Récupère les détails d'une session Stripe (statut uniquement, pas de métadonnées)
         */
        public async getSession(params: { sessionId: string }): Promise<ResponseType<typeof api_stripe_stripe_getSession>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/stripe/session/${encodeURIComponent(params.sessionId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_stripe_stripe_getSession>
        }

        /**
         * Gère les webhooks Stripe
         */
        public async handleWebhook(params: RequestType<typeof api_stripe_webhooks_handleWebhook>): Promise<ResponseType<typeof api_stripe_webhooks_handleWebhook>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                "stripe-signature": params.signature,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                body: params.body,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/stripe/webhooks`, {headers, method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_stripe_webhooks_handleWebhook>
        }

        public async testStripeKey(): Promise<ResponseType<typeof api_stripe_test_testStripeKey>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/stripe/test-key`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_stripe_test_testStripeKey>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { cancelDeletion as api_user_cancel_deletion_cancelDeletion } from "~backend/user/cancel-deletion";
import {
    getConsentPreferences as api_user_consent_getConsentPreferences,
    revokeConsent as api_user_consent_revokeConsent,
    saveConsentPreferences as api_user_consent_saveConsentPreferences,
    updateConsentPreferences as api_user_consent_updateConsentPreferences
} from "~backend/user/consent";
import {
    confirmDeletion as api_user_delete_confirmDeletion,
    requestDeletion as api_user_delete_requestDeletion
} from "~backend/user/delete";

export namespace user {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.cancelDeletion = this.cancelDeletion.bind(this)
            this.confirmDeletion = this.confirmDeletion.bind(this)
            this.getConsentPreferences = this.getConsentPreferences.bind(this)
            this.requestDeletion = this.requestDeletion.bind(this)
            this.revokeConsent = this.revokeConsent.bind(this)
            this.saveConsentPreferences = this.saveConsentPreferences.bind(this)
            this.updateConsentPreferences = this.updateConsentPreferences.bind(this)
        }

        public async cancelDeletion(params: RequestType<typeof api_user_cancel_deletion_cancelDeletion>): Promise<ResponseType<typeof api_user_cancel_deletion_cancelDeletion>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/user/delete/cancel`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_user_cancel_deletion_cancelDeletion>
        }

        public async confirmDeletion(params: RequestType<typeof api_user_delete_confirmDeletion>): Promise<ResponseType<typeof api_user_delete_confirmDeletion>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/user/delete/confirm`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_user_delete_confirmDeletion>
        }

        public async getConsentPreferences(params: { user_identifier: string }): Promise<ResponseType<typeof api_user_consent_getConsentPreferences>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/user/consent/${encodeURIComponent(params.user_identifier)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_user_consent_getConsentPreferences>
        }

        public async requestDeletion(params: RequestType<typeof api_user_delete_requestDeletion>): Promise<ResponseType<typeof api_user_delete_requestDeletion>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/user/delete`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_user_delete_requestDeletion>
        }

        public async revokeConsent(params: { user_identifier: string }): Promise<ResponseType<typeof api_user_consent_revokeConsent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/user/consent/${encodeURIComponent(params.user_identifier)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_user_consent_revokeConsent>
        }

        public async saveConsentPreferences(params: RequestType<typeof api_user_consent_saveConsentPreferences>): Promise<ResponseType<typeof api_user_consent_saveConsentPreferences>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/user/consent`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_user_consent_saveConsentPreferences>
        }

        public async updateConsentPreferences(params: RequestType<typeof api_user_consent_updateConsentPreferences>): Promise<ResponseType<typeof api_user_consent_updateConsentPreferences>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/user/consent`, {method: "PUT", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_user_consent_updateConsentPreferences>
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}


// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.50.6)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
